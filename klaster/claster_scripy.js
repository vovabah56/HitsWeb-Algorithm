const canvas = document.querySelector('canvas'); 
const ctx = canvas.getContext("2d"); 

let canva = document.getElementById('canva');
let canvasWidth = window.getComputedStyle(canvas).getPropertyValue("width");
let canvasWidthNum = parseInt(canvasWidth.replace("px", ""));

canvas.width = canvasWidthNum; 
canvas.height = canvas.width; 
let radius=10;
let circles = []; // –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤
let action=0;
const add = document.getElementById('add');
const erase = document.getElementById('delete');
const deleteAll = document.getElementById('deleteAll');
const startK = document.getElementById('startK');
const startI = document.getElementById('startI');
const compare = document.getElementById('compare');
const image = document.getElementById('scheme');


class Point {
    constructor(x, y, r) {
      this.x = x;
      this.y = y;
      this.r=r;
    }
  }

ctx.beginPath(); 
ctx.rect(0, 0, canvas.width, canvas.height); 
ctx.fillStyle = 'white'; 
ctx.fill();  

function draw(x, y, r){
    ctx.beginPath(); 
    ctx.arc(x, y, r, 0, 2 * Math.PI); 
    ctx.fillStyle = 'black';
    ctx.fill(); 
    let point= new Point(x, y, r);
    circles.push(point); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–¥–∏—É—Å –∫—Ä—É–≥–∞ –≤ –º–∞—Å—Å–∏–≤–µ
  }
function clear(x, y, r){ 
    for (let i = 0; i < circles.length; i++) { // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫—Ä—É–≥–∞–º –≤ –º–∞—Å—Å–∏–≤–µ 
        const dist = Math.sqrt((x - circles[i].x) ** 2 + (y - circles[i].y) ** 2); // –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –∫—Ä—É–≥–∞ 
        if (dist <= circles[i].r) { // –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ–ø–∞–ª –≤–Ω—É—Ç—Ä—å –∫—Ä—É–≥–∞ 
            ctx.beginPath(); 
            ctx.rect(0, 0, canvas.width, canvas.height); 
            ctx.fillStyle = 'white'; 
            ctx.fill(); 
            circles.splice(i, 1); // —É–¥–∞–ª—è–µ–º –∫—Ä—É–≥ –∏–∑ –º–∞—Å—Å–∏–≤–∞ 
            for (let j = 0; j < circles.length; j++) { // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫—Ä—É–≥–∏ 
                ctx.beginPath();   
                ctx.arc(circles[j].x, circles[j].y, circles[j].r, 0, 2 * Math.PI);   
                ctx.fillStyle = 'black';  
                ctx.fill();   
            } 
            break; // –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—Ä—É–≥ 
        } 
    } 
}

compare.addEventListener('mouseout', function() {
  image.style.display = 'none';
});
compare.addEventListener('mouseover', function() {
  image.style.display = 'block';
});

add.addEventListener('click', function () {
    action=1;
  });

erase.addEventListener('click', function () {
    action=2;
  });
deleteAll.addEventListener('click', function () {
    action=0;
    circles = [];
    ctx.beginPath(); 
    ctx.rect(0, 0, canvas.width, canvas.height); 
    ctx.fillStyle = 'white'; 
    ctx.fill();
  });

  canvas.addEventListener('click', function(event) { 
    if (action == 1) { 
      const x = event.clientX - canvas.offsetLeft;
      const y = event.clientY - canvas.offsetTop;
        draw(x,y,radius); 
    } 
    else if (action == 2) {
        const x = event.clientX - canvas.offsetLeft;
        const y = event.clientY - canvas.offsetTop;
        clear(x,y,radius); 
    }
});


function getRandomColor() { // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
  const letters = '0123456789ABCDEF';
  let color = '#';
  for (let i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
}

startK.addEventListener('click', function () {
  let k=document.getElementById("sizeK").value;
  if(circles.length==0){
    alert("You are cringe, –¥–æ–±–∞–≤—å —Ç–æ—á–∫–∏ ü•∫");
  }
  else if(circles.length<k){
    alert("–°ringe, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?..");
  }
  else{
  let clusters = kMeans(circles,k); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ kMeans –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  for (const cluster of clusters) { // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    ctx.fillStyle = cluster.color; // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ color –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
    for (const point of cluster.points) { // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –≤ –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ
      ctx.beginPath();
      ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);
      ctx.fill();
    }
  }
  }

});

function distance(pointA, pointB) {
  const dx = pointA.x - pointB.x;
  const dy = pointA.y - pointB.y;
  return Math.sqrt(dx*dx + dy*dy);
}

function nearestCentroid(point, centroids) {
  let minDist = Infinity;
  let nearest = null;
  for (const centroid of centroids) {
    const dist = distance(point, centroid);
    if (dist < minDist) {
      minDist = dist;
      nearest = centroid;
    }
  }
  return nearest;
}

function getRandomCentroids(k) {
  const centroids = [];
  const canvas = document.querySelector('canvas');
  const width = canvas.width;
  const height = canvas.height;

  for (let i = 0; i < k; i++) {
    const x = Math.floor(Math.random() * width);
    const y = Math.floor(Math.random() * height);
    centroids.push({x, y});
  }

  return centroids;
}

function updateCentroids(clusters) {
  const newCentroids = [];
  for (const cluster of clusters) {
    let sumX = 0;
    let sumY = 0;
    for (const point of cluster.points) {
      sumX += point.x;
      sumY += point.y;
    }
    const centroidX = sumX / cluster.points.length;
    const centroidY = sumY / cluster.points.length;
    newCentroids.push({x: centroidX, y: centroidY});
  }
  return newCentroids;
}

function kMeans(points, k) {
  let centroids = getRandomCentroids(k);
  let clusters = [];
  for (let i = 0; i < k; i++) {
    const color = getRandomColor();
    clusters.push({centroid: centroids[i], points: [], color: color});
  }
  while (true) {
    for (const cluster of clusters) {
      cluster.points = [];
    }
    for (const point of points) {
      const nearest = nearestCentroid(point, centroids);
      for (const cluster of clusters) {
        if (cluster.centroid === nearest) {
          cluster.points.push(point);
          break;
        }
      }
    }
    const newCentroids = updateCentroids(clusters);
    if (centroids.toString() === newCentroids.toString()) {
      break;
    }
    centroids = newCentroids;
  }
  return clusters;
}

function HierarchicalClustering(circles,k){
  let clusters = [];
  for (let i = 0; i < circles.length; i++) { // —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫—Ä—É–≥–∞ 
    const cluster = [circles[i]]; 
    clusters.push(cluster); 
  } 
  while (clusters.length > k) { // –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ 
    let minDistance = Infinity; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ 
    let indexA, indexB; // –∏–Ω–¥–µ–∫—Å—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å 
    for (let i = 0; i < clusters.length; i++) { 
      for (let j = i+1; j < clusters.length; j++) { 
        const distanceBetweenClusters = getDistanceBetweenClusters(clusters[i], clusters[j]); // –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ 
        if (distanceBetweenClusters < minDistance) { // –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ 
          minDistance = distanceBetweenClusters; // –æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 
          indexA = i; // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ 
          indexB = j; 
        } 
      } 
    } 
    const newCluster = clusters[indexA].concat(clusters[indexB]); // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä, –æ–±—ä–µ–¥–∏–Ω—è—è –¥–≤–∞ –±–ª–∏–∂–∞–π—à–∏—Ö 
    clusters.splice(indexB, 1); // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã 
    clusters.splice(indexA, 1); 
    clusters.push(newCluster); // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –≤ –º–∞—Å—Å–∏–≤ 
  } 
  return clusters;
}

startI.addEventListener('click', function () {
  let k=document.getElementById("sizeK").value;
  if(circles.length==0){
    alert("You are cringe, –¥–æ–±–∞–≤—å —Ç–æ—á–∫–∏ ü•∫");
  }
  else if(circles.length<k){
    alert("–°ringe, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?..");
  }
  else{
    let clusters = HierarchicalClustering(circles,k);
    
    for (let i = 0; i < clusters.length; i++) { // –æ–∫—Ä–∞—à–∏–≤–∞–µ–º –∫—Ä—É–≥–∏ –≤ —Ü–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ 
      const color = getRandomColor(); 
      for (let j = 0; j < clusters[i].length; j++) { 
        const circle = clusters[i][j]; 
        ctx.beginPath();    
        ctx.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI);    
        ctx.fillStyle = color;   
        ctx.fill();    
      }  
    } 
  }; 
});

  function getDistanceBetweenClusters(clusterA, clusterB) { // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ 
    let minDistance = Infinity; 
    for (let i = 0; i < clusterA.length; i++) { 
      for (let j = 0; j < clusterB.length; j++) { 
        const distanceBetweenPoints = distance(clusterA[i], clusterB[j]); // –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ 
        if (distanceBetweenPoints < minDistance) { // –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ 
          minDistance = distanceBetweenPoints; // –æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 
        } 
      } 
    } 
    return minDistance; 
  }

  compare.addEventListener('click', function () {
    let k=document.getElementById("sizeK").value;
    if(circles.length==0){
      alert("You are cringe, –¥–æ–±–∞–≤—å —Ç–æ—á–∫–∏ ü•∫");
    }
    else if(circles.length<k){
      alert("–°ringe, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?..");
    }
    else{
      let clusters1 = HierarchicalClustering(circles,k);
      let clusters2 = kMeans(circles,k);
      for (const cluster of clusters2) { // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        ctx.fillStyle = cluster.color; // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ color –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
        for (const point of cluster.points) { // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –≤ –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ
          ctx.beginPath();
          ctx.arc(point.x, point.y, radius,Math.PI/2, 3*Math.PI/2); 
          ctx.lineTo(point.x, point.y,); // –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –∫ —Ü–µ–Ω—Ç—Ä—É –∫—Ä—É–≥–∞
          ctx.closePath(); // –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É—Ç—å
          ctx.fill(); // –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –∫—Ä—É–≥–∞
        }
      }

      for (let i = 0; i < clusters1.length; i++) { // –æ–∫—Ä–∞—à–∏–≤–∞–µ–º –∫—Ä—É–≥–∏ –≤ —Ü–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ 
        const color = getRandomColor(); 
        for (let j = 0; j < clusters1[i].length; j++) { 
          const circle = clusters1[i][j]; 
          ctx.beginPath();    
          ctx.arc(circle.x, circle.y, circle.r, 3*Math.PI/2, Math.PI/2);    
          ctx.fillStyle = color;   
          ctx.fill();    
        }  
      } 

    }
  })
